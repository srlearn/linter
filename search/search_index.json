{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inductive Logic Programming (ILP) Grammar and Linter \u00b6 This defines a simple grammar ( cmd/ILPLang.g4 ) and a command-line tool which can be used to lint for problems in dataset formatting. Overview \u00b6 The target is a linter binary to help point out issues when tokenizing or parsing a dataset. Example 1: No Errors When the dataset is well-formatted, nothing is returned: smokes(person1). friends(person1,person2). friends(person2,person1). ./linter -tokens -file=examples/pos/pos1.txt ./linter -file=examples/pos/pos1.txt # (No output for either case) Example 2: Bad Data When there is something in the data that cannot be recognized, problems are directed to stderr: friends(person1,person2). Bad Data. ./linter -tokens -file=examples/neg/neg1.txt line 2:0 token recognition error at: 'B' line 2:3 token recognition error at: ' ' line 2:4 token recognition error at: 'D' ./linter -file=examples/neg/neg1.txt line 2:0 token recognition error at: 'B' line 2:3 token recognition error at: ' ' line 2:4 token recognition error at: 'D' line 2:5 missing '(' at 'ata' line 2:8 mismatched input '.' expecting {')', ','} Example 3: Regression Examples \u00b6 The parser can also look for regressionExample values, used in regression data sets. The parser will not check whether an entire dataset is correct ( regressionExample in labeled as positive, empty negative examples, and facts). But this could be accomplished fairly easily elsewhere. regressionExample(medv(id100),33.2). regressionExample(medv(id101),27.5). regressionExample(medv(id10),18.9). regressionExample(medv(id102),26.5). Usage \u00b6 Download a Binary \u00b6 Precompiled binaries are listed on the GitHub Releases page , and the latest version can be downloaded with these links: Platform Link Linux/amd64 Download macOS/amd64 Download Windows/amd64 Download Build from Source \u00b6 Building requires a Go compiler . cd cmd go build A copy of the generated ANTLR parser files are committed to the repository, and rebuilding them requires an ANTLR Parser Generator . make clean make linter Limitations \u00b6 This grammar is extremely conservative currently: the only tokens allowed are lowercase characters, integers, and underscores. a(x_1,y_1). b(x_1). Contributions \u00b6 Alexander L. Hayes - Indiana University, Bloomington Some ideas were taken from the FOPC_MLN_ILP_Parser developed by Jude Shavlik and Trevor Walker (and possibly contributed to by many others who went unnamed in the source code). There are a few versions of their Tokenizers ( StreamTokenizerJWS and StreamTokenizerTAW ) and Parser currently used in other projects.","title":"Home"},{"location":"#inductive-logic-programming-ilp-grammar-and-linter","text":"This defines a simple grammar ( cmd/ILPLang.g4 ) and a command-line tool which can be used to lint for problems in dataset formatting.","title":"Inductive Logic Programming (ILP) Grammar and Linter"},{"location":"#overview","text":"The target is a linter binary to help point out issues when tokenizing or parsing a dataset. Example 1: No Errors When the dataset is well-formatted, nothing is returned: smokes(person1). friends(person1,person2). friends(person2,person1). ./linter -tokens -file=examples/pos/pos1.txt ./linter -file=examples/pos/pos1.txt # (No output for either case) Example 2: Bad Data When there is something in the data that cannot be recognized, problems are directed to stderr: friends(person1,person2). Bad Data. ./linter -tokens -file=examples/neg/neg1.txt line 2:0 token recognition error at: 'B' line 2:3 token recognition error at: ' ' line 2:4 token recognition error at: 'D' ./linter -file=examples/neg/neg1.txt line 2:0 token recognition error at: 'B' line 2:3 token recognition error at: ' ' line 2:4 token recognition error at: 'D' line 2:5 missing '(' at 'ata' line 2:8 mismatched input '.' expecting {')', ','}","title":"Overview"},{"location":"#example-3-regression-examples","text":"The parser can also look for regressionExample values, used in regression data sets. The parser will not check whether an entire dataset is correct ( regressionExample in labeled as positive, empty negative examples, and facts). But this could be accomplished fairly easily elsewhere. regressionExample(medv(id100),33.2). regressionExample(medv(id101),27.5). regressionExample(medv(id10),18.9). regressionExample(medv(id102),26.5).","title":"Example 3: Regression Examples"},{"location":"#usage","text":"","title":"Usage"},{"location":"#download-a-binary","text":"Precompiled binaries are listed on the GitHub Releases page , and the latest version can be downloaded with these links: Platform Link Linux/amd64 Download macOS/amd64 Download Windows/amd64 Download","title":"Download a Binary"},{"location":"#build-from-source","text":"Building requires a Go compiler . cd cmd go build A copy of the generated ANTLR parser files are committed to the repository, and rebuilding them requires an ANTLR Parser Generator . make clean make linter","title":"Build from Source"},{"location":"#limitations","text":"This grammar is extremely conservative currently: the only tokens allowed are lowercase characters, integers, and underscores. a(x_1,y_1). b(x_1).","title":"Limitations"},{"location":"#contributions","text":"Alexander L. Hayes - Indiana University, Bloomington Some ideas were taken from the FOPC_MLN_ILP_Parser developed by Jude Shavlik and Trevor Walker (and possibly contributed to by many others who went unnamed in the source code). There are a few versions of their Tokenizers ( StreamTokenizerJWS and StreamTokenizerTAW ) and Parser currently used in other projects.","title":"Contributions"},{"location":"grammar/","text":"Grammar \u00b6 A full copy of the ANTLR grammar is copied here. // Copyright 2021 Alexander L. Hayes // Apache 2.0 License /* Some portions of this are based on the ANTLR `prolog.g4` example, Copyright (c) 2013, Tom Everett Used under the terms of a 3-Clause BSD License, copied below: Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of Tom Everett nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ grammar ILPLang; LPAREN: '('; RPAREN: ')'; COMMA: ','; PERIOD: '.'; NEWLINE: '\\r' '\\n' | '\\n' | '\\r' ; fragment DIGIT: [0-9]; fragment SMALL_LETTER: [a-z]; fragment ALPHANUMERIC : SMALL_LETTER | DIGIT | '_' ; FLOAT: (DIGIT)* PERIOD (DIGIT)+ ; INTEGER: (DIGIT)+ ; start : (classification_task | regression_task) EOF ; classification_task: (term)* ; regression_task: (regression_term)* ; // This recognizes both relations and entities. // The grammar would be more generally useful if this recognized entities and // relations on those entities. OBJECT: (ALPHANUMERIC)+; term: OBJECT LPAREN OBJECT (COMMA (OBJECT | INTEGER))* RPAREN PERIOD NEWLINE; regression_term: 'regressionExample' LPAREN OBJECT LPAREN OBJECT RPAREN COMMA (FLOAT | INTEGER) RPAREN PERIOD NEWLINE;","title":"Grammar"},{"location":"grammar/#grammar","text":"A full copy of the ANTLR grammar is copied here. // Copyright 2021 Alexander L. Hayes // Apache 2.0 License /* Some portions of this are based on the ANTLR `prolog.g4` example, Copyright (c) 2013, Tom Everett Used under the terms of a 3-Clause BSD License, copied below: Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of Tom Everett nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */ grammar ILPLang; LPAREN: '('; RPAREN: ')'; COMMA: ','; PERIOD: '.'; NEWLINE: '\\r' '\\n' | '\\n' | '\\r' ; fragment DIGIT: [0-9]; fragment SMALL_LETTER: [a-z]; fragment ALPHANUMERIC : SMALL_LETTER | DIGIT | '_' ; FLOAT: (DIGIT)* PERIOD (DIGIT)+ ; INTEGER: (DIGIT)+ ; start : (classification_task | regression_task) EOF ; classification_task: (term)* ; regression_task: (regression_term)* ; // This recognizes both relations and entities. // The grammar would be more generally useful if this recognized entities and // relations on those entities. OBJECT: (ALPHANUMERIC)+; term: OBJECT LPAREN OBJECT (COMMA (OBJECT | INTEGER))* RPAREN PERIOD NEWLINE; regression_term: 'regressionExample' LPAREN OBJECT LPAREN OBJECT RPAREN COMMA (FLOAT | INTEGER) RPAREN PERIOD NEWLINE;","title":"Grammar"}]}